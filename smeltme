#!/usr/bin/python3
"""
Parse https://smelt.suse.de/overview/ for specified groups
"""

import argparse
import json
import ssl
import sys

from datetime import datetime
from itertools import zip_longest
from urllib.request import urlopen
from urllib.error import HTTPError, URLError


__version__ = "0.3.0"

GROUPS = ['qam-ha', 'qam-sap']
URL = "https://smelt.suse.de/api/v1/overview/testing/"


def main():
    """
    Main function
    """
    fmt = "%-30s %-10s %-11s %-4s %-4s %-7s %-20s %-40s %-20s"
    if not opts.no_header:
        print(fmt % (
            "ID", "SIZE", "CREATED", "DUE", "PRIO", "GROUP", "PACKAGES", "PRODUCTS", "REFERENCES"))
    with urlopen(URL, context=ctx) as conn:
        data = json.loads(conn.read())
    results = data['results']
    while data['next'] is not None:
        with urlopen(data['next'], context=ctx) as conn:
            data = json.loads(conn.read())
        results += data['results']
    for item in results:
        if item['unfinished_reviews'][0]['assigned_by_group'] is None:
            continue
        if item['unfinished_reviews'][0]['assigned_by_group']['name'] in opts.groups:
            id_rr = "%s:%s" % (item['incident']['project'], item['request_id'])
            # rating = item['incident']['rating']['name']
            size = "%s %s" % (item['incident']['testsize'], item['incident']['testcomplexity'])
            created = item['created'][:10]
            enddate = datetime.strptime(item['incident']['deadline'], "%Y-%m-%dT%H:%M:%SZ") - datetime.now()
            due = "%dd" % enddate.days
            priority = item['incident']['priority']
            group = item['unfinished_reviews'][0]['assigned_by_group']['name']
            packages = item['packages']
            products = item['channellist']
            references = [_['url'] for _ in item['references']]
            print(fmt % (
                id_rr, size, created, due, priority, group, packages[0], products[0], references[0]))
            for package, product, reference in zip_longest(packages[1:], products[1:], references[1:], fillvalue=""):
                print("%71s %-20s %-40s %-20s" % (" ", package, product, reference))


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-g', '--groups', action='append',
        help="Filter by group. May be specified multiple times")
    parser.add_argument(
        '-H', '--no-header', action='store_true',
        help="Do not show header")
    parser.add_argument(
        '-k', '--insecure', action='store_true',
        help="Allow insecure server connections when using SSL")
    parser.add_argument(
        '-V', '--version', action='store_true',
        help="Show version and exit")
    return parser.parse_args()


if __name__ == "__main__":
    opts = parse_opts()
    if opts.version:
        print(__version__)
        sys.exit(0)
    if not opts.groups:
        opts.groups = GROUPS
    ctx = ssl.create_default_context()
    if opts.insecure:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    # Check if host is accessible
    try:
        urlopen("https://smelt.suse.de/static/img/favicon.ico", context=ctx)
    except (HTTPError, URLError) as err:
        print("ERROR: %s" % err.reason, file=sys.stderr)
        sys.exit(1)
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
