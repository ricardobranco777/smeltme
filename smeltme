#!/usr/bin/python3
"""
Parse https://smelt.suse.de/overview/ for specified groups or users
"""

import argparse
import json
import ssl
import sys

from datetime import datetime
from itertools import chain, zip_longest
from urllib.request import urlopen
from urllib.error import HTTPError, URLError


__version__ = "1.1.2"

GROUPS = ['qam-ha', 'qam-sap']
URL = "https://smelt.suse.de/api/v1/overview/testing/"


def get_users(item):
    """
    Filter users from item['unfinished_reviews'] and return a set
    """
    users = {
        _['assigned_by_user']['username'] for _ in item['unfinished_reviews']
        if _['assigned_by_user'] is not None}
    if opts.all:
        return users
    return users & opts.user


def get_groups(item):
    """
    Filter groups from item['unfinished_reviews'] and return a set
    """
    groups = {
        _['assigned_by_group']['name'] for _ in item['unfinished_reviews']
        if _['assigned_by_group'] is not None}
    if opts.all:
        return groups
    return groups & opts.group


def get_info():
    """
    Get information
    """
    with urlopen(URL, context=ctx) as conn:
        data = json.loads(conn.read())
    results = data['results']
    while data['next'] is not None:
        with urlopen(data['next'], context=ctx) as conn:
            data = json.loads(conn.read())
        results += data['results']
    if opts.all:
        return results
    return [item for item in results if get_users(item) or get_groups(item)]


def print_info(info):
    """
    Print information
    """
    keys = ("ID", "SIZE", "CREATED", "DUE", "PRIO", "ASSIGNED", "VERSIONS", "PACKAGES", "REFERENCES")
    if not opts.no_header:
        if opts.csv:
            print(",".join(keys))
        else:
            assigned_width = max(10, max(len(_) for item in info for _ in chain(get_users(item) | get_groups(item))))
            package_width = max(10, max(len(package) for item in info for package in item['packages']))
            fmt = "%-30s %-10s %-11s %5s  %5s  %-{}s  %-12s %-{}s %s".format(assigned_width, package_width)
            print(fmt % keys)
    for item in info:
        id_rr = "%s:%s" % (item['incident']['project'], item['request_id'])
        size = "%s %s" % (item['incident']['testsize'], item['incident']['testcomplexity'])
        created = item['created'][:len("YYYY-MM-DD")]
        enddate = datetime.fromisoformat(item['incident']['deadline'][:-1]) - datetime.utcnow()
        due = "%dd" % enddate.days
        assigned = list(get_users(item) | get_groups(item))
        item['packages'].sort()
        versions = sorted(_.split(':')[1] for _ in item['codestreams'] if _.startswith("SUSE:SLE-"))
        if opts.verbose:
            refs = sorted(_['url'] for _ in item['references'])
        else:
            # NOTE: Some entries have only "https:" in their name
            refs = sorted(_['name'] for _ in item['references'] if _['name'] != "https:")
        if not refs:
            refs = [""]
        if opts.csv:
            print(",".join((id_rr, size, created, due, str(item['incident']['priority']), "|".join(assigned), "|".join(item['packages']), "|".join(refs))))
        else:
            print(fmt % (id_rr, size, created, due, item['incident']['priority'], assigned[0], versions[0], item['packages'][0], refs[0]))
            for assignee, version, package, ref in zip_longest(assigned[1:], versions[1:], item['packages'][1:], refs[1:], fillvalue=" "):
                print("%67s %-*s  %-12s %-*s %s" % (" ", assigned_width, assignee, version, package_width, package, ref))


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-a', '--all', action='store_true',
        help="Show all. Ignore -g & -u options")
    parser.add_argument(
        '-c', '--csv', action='store_true',
        help="CSV output")
    parser.add_argument(
        '-g', '--group', action='append',
        help="Filter by group. May be specified multiple times")
    parser.add_argument(
        '-H', '--no-header', action='store_true',
        help="Do not show header")
    parser.add_argument(
        '-j', '--json', action='store_true',
        help="JSON output")
    parser.add_argument(
        '-k', '--insecure', action='store_true',
        help="Allow insecure server connections when using SSL")
    parser.add_argument(
        '-u', '--user', action='append',
        help="Filter by user. May be specified multiple times")
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help="Verbose. Show URL's for references")
    parser.add_argument(
        '-V', '--version', action='store_true',
        help="Show version and exit")
    return parser.parse_args()


def main():
    """
    Main function
    """
    info = get_info()
    if opts.json:
        print(json.dumps(info))
    else:
        print_info(info)


if __name__ == "__main__":
    opts = parse_opts()
    if opts.version:
        print(__version__)
        sys.exit(0)
    if not opts.user and not opts.group:
        opts.group = GROUPS
    opts.user = set(opts.user) if opts.user else set()
    opts.group = set(opts.group) if opts.group else set()
    if opts.all:
        opts.user, opts.group = None, None
    ctx = ssl.create_default_context()
    if opts.insecure:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    # Check if host is accessible
    try:
        urlopen("https://smelt.suse.de/static/img/favicon.ico", context=ctx)
    except (HTTPError, URLError) as err:
        print("ERROR: %s" % err.reason, file=sys.stderr)
        sys.exit(1)
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
